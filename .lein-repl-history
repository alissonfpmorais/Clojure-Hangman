(+ 1 (* 5 (/ 10 2)))
max-health
(require '[forca.core :as forca] :reload)
(forca/perdeu)
(require '[forca.core :as forca] :reload)
(forca/jogo)
(forca/game)
(forca/game 5)
(require '[forca.core :as forca] :reload)
(forca/game 5)
(defn fib [n]
  (if (= x 0)
    0
    (if (= x 1)
      1
      (+ (fib (- n 2)) (fib (- n 1))))))
(defn fib [n]
  (if (= n 0)
    0
    (if (= n 1)
      1
      (+ (fib (- n 2)) (fib (- n 1))))))
(forca/fib 4)
5
6
7
(forca/fib 5)
(forca/fib 6)
(forca/fib 7)
(require '[forca.core :as forca] :reload)
(forca/game 0 "MELANCIA" #{"M", "A"})
(forca/game 1 "MELANCIA" #{"M", "A"})
(require '[forca.core :as forca] :reload)
(forca/game 1 "MELANCIA" #{"M", "A"})
(require '[forca.core :as forca] :reload)
(forca/missing-letters "MELANCIA" #{"M", "A"})
(require '[forca.core :as forca] :reload)
(forca/game 5 "MELANCIA" #{"M", "A"})
(forca/game 5 "MELANCIA" #{"M", "E", "L", "A", "N", "C", "I"})
(forca/game 0 "MELANCIA" #{"M", "E", "L", "A", "N", "C", "I"})
(forca/game 5 "MELANCIA" #{"M", "E", "L", "A", "N", "C", "I"})
(def numeros #{1, 2, 3, 4, 5})
(def carros #{50000.0, 60000.0})
carros
numeros
(remove (fn [num] (= 1 (rem num 2))) numeros)
(defn triplica [x] (* x 3))
(map triplica numeros)
(defn edges [x] ((< x 2) or (> x 4)))
(defn edges [x] (or (< x 2) (> x 4)))
(filter edges numeros)
(defn edges [x] (or (> x 2) (< x 4)))
(filter edges numeros)
(defn edges [x] (or (< x 2) (> x 4)))
(filter edges numeros)
(def palavra #{"A", "L", "U", "R"})
(contains? palavra "A")
(and (contains? palavra "A") (contains? palavra "O"))
(and (contains? palavra "A") (contains? palavra "R"))
(and (contains? palavra "A") (contains? palavra "O"))
